openapi: '3.0.2'
info:
  title: HCA Matrix Service
  description: Human Cell Atlas Matrix Service API
  version: 1.0.0
servers:
  - url: https://{apiHost}
    variables:
      apiHost:
        default: ${API_HOST}
paths:
  /v0/matrix:
    post:
      summary: "Submit a matrix query request."
      description: "Prepares a single expression matrix combining all expression matrices belonging to the specified
        analysis bundles. On success, this request will asynchronously start a job to prepare the expression matrix and
        return with the request ID of the job. The request ID can be used to retrieve the status and results of the job
        from the GET endpoint."
      operationId: matrix.lambdas.api.v0.core.post_matrix
      tags:
        - v0
      requestBody:
        description: "Use either bundle_fqids or bundle_fqids_url to specify input analysis bundles; bundle_fqids
          expects a list of fully-qualified IDs (bundle_uuid.bundle_version); bundle_fqids_url expects a
          URL that serves a Data Browser download manifest TSV file. Use the format field to specify the desired file
          format of the output expression matrix. Supported format values are 'loom', 'csv' and 'mtx'."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v0_MatrixRequest'
      responses:
        "202":
          description: "Matrix request accepted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v0_MatrixPostResponse'
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v0_MatrixErrorResponse'

  /v0/matrix/{request_id}:
    get:
      summary: "Retrieve the status, and result if available, of a matrix query request."
      description: "Returns the status, and URI of the result if available, of a matrix query request. The status of a
        request can be 'Complete', 'In Progress' or 'Failed'. If the request is 'Complete', the matrix_location field
        will be populated with a URL to download the matrix. If the request 'Failed',
        the error message will be available in the message field."
      operationId: matrix.lambdas.api.v0.core.get_matrix
      tags:
        - v0
      parameters:
        - in: path
          name: request_id
          description: "The request ID generated by a POST request."
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Request found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v0_MatrixGetResponse'
        "404":
          description: "Request not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v0_MatrixErrorResponse'
  /v0/matrix/formats:
    get:
      summary: "Returns supported output formats."
      description: "Returns the list of expression matrix formats that can be requested from this service."
      operationId: matrix.lambdas.api.v0.core.get_formats
      tags:
        - v0
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v0_MatrixFormat'
  /v1/matrix:
    post:
      summary: Request an expression matrix
      operationId: matrix.lambdas.api.v1.core.post_matrix
      tags:
        - v1
      description: >
        Request an expression matrix using a set of filters to be
        ANDed and applied to the HCA expression data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1_MatrixRequest'
            examples:
              KidneyHighGenes: # Cells from the kidney with >5000 detected
                                # genes in mtx format and select metadata
                                # fields
                value:
                  filter:
                    op: 'and'
                    value:
                      - op: '='
                        field: 'organ'
                        value: 'kidney'
                      - op: '>'
                        field: 'genes_detected'
                        value: 5000
                  fields:
                    - 'short_name'
                    - 'organ'
                    - 'genus_species'
                    - 'genes_detected'
                  format: 'mtx'
              PancreasOrBrain10x: # Cell from the pancreas or brain sequenced
                                  # via 10x
                value:
                  filter:
                    op: 'and'
                    value:
                      - op: 'or'
                        value:
                          - op: '='
                            field: 'organ'
                            value: 'pancreas'
                          - op: '='
                            field: 'organ'
                            value: 'brain'
                      - op: '='
                        field: 'construction_approach_label'
                        value: '10x v2 sequencing'
              AllSS2Transcripts: # Transcript data for all SS2 cells, in loom                  # format and all metadata fields.
                value:
                  filter:
                    op: '='
                    field: 'construction_approach_label'
                    value: 'Smart-Seq2'
                  feature: 'transcript'
      responses:
        '202':
          description: 'Matrix request accepted.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixPostResponse'
        '400':
          description: 'Bad request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixErrorResponse'
        '413':
          description: 'Filter entity too large.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixErrorResponse'
  /v1/matrix/{request_id}:
    get:
      summary: 'Get status and result of a matrix request'
      operationId: matrix.lambdas.api.v1.core.get_matrix
      tags:
        - v1
      parameters:
        - name: request_id
          schema:
            $ref: '#/components/schemas/v1_RequestId'
          required: True
          in: path
          description: 'ID returned by a previous matrix request.'
      responses:
        '200':
          description: "Matrix request found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixGetResponse'
        '404':
          description: "Matrix request id not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixErrorResponse'
  /v1/filters:
    get:
      summary: 'Get a list of permitted filters'
      operationId: matrix.lambdas.api.v1.core.get_filters
      tags:
        - v1
      description: >
        Get a list of filters that a POST to /matrix will accept.
      responses:
        '200':
          description: 'Successfully return filter list.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixFilters'
  /v1/filters/{filter_name}:
    get:
      summary: 'Get a description of a filter'
      operationId: matrix.lambdas.api.v1.core.get_filter_detail
      tags:
        - v1
      description: >
        Get detailed information about a filter that can be applied
        to the HCA expression data.
      parameters:
        - name: filter_name
          schema:
            type: string
          required: True
          in: path
          description: 'Filter to describe.'
      responses:
        '200':
          description: "Filter found."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/v1_NumericFieldDetail'
                  - $ref: '#/components/schemas/v1_CategoricalFieldDetail'
        '404':
          description: 'Filter not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixErrorResponse'
  /v1/formats:
    get:
      summary: 'Get a list of available matrix formats'
      operationId: matrix.lambdas.api.v1.core.get_formats
      tags:
        - v1
      description: >
        Get a list of matrix formats that a POST to /matrix
        will accept.
      responses:
        '200':
          description: 'Successfully return format list.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixFormats'
  /v1/formats/{format_name}:
    get:
      summary: 'Get a description of a matrix format'
      operationId: matrix.lambdas.api.v1.core.get_format_detail
      tags:
        - v1
      parameters:
        - name: format_name
          schema:
            $ref: '#/components/schemas/v1_MatrixFormat'
          required: True
          in: path
          description: 'Format to describe'
      responses:
        '200':
          description: 'Format found.'
          content:
            application/json:
              schema:
                type: string
        '404':
          description: 'Format not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixErrorResponse'
  /v1/features:
    get:
      summary: 'Get a list of available feature types'
      operationId: matrix.lambdas.api.v1.core.get_features
      tags:
        - v1
      description: >
        Get a list of matrix feature types that a POST to /matrix
        will accept.
      responses:
        '200':
          description: 'Successfully return feature list.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixFeatures'
  /v1/features/{feature_name}:
    get:
      summary: 'Get a information about a matrix feature type'
      operationId: matrix.lambdas.api.v1.core.get_feature_detail
      tags:
        - v1
      parameters:
        - name: feature_name
          schema:
            $ref: '#/components/schemas/v1_MatrixFeature'
          required: True
          in: path
          description: 'Feature type to describe'
      responses:
        '200':
          description: 'Feature found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixFeatureDetail'
        '404':
          description: 'Feature not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixErrorResponse'
  /v1/fields:
    get:
      summary: 'Get a list of available metadata fields'
      operationId: matrix.lambdas.api.v1.core.get_fields
      tags:
        - v1
      description: >
        Get a list of metadata field names that a POST to
        /matrix will accept.
      responses:
        '200':
          description: 'Successfully return field list.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixFields'
  /v1/fields/{field_name}:
    get:
      summary: 'Get a description of a metadata field'
      operationId: matrix.lambdas.api.v1.core.get_field_detail
      tags:
        - v1
      description: >
        Get detailed information about an available metadata field.
      parameters:
        - name: field_name
          schema:
            type: string
          required: True
          in: path
          description: 'Field to describe.'
      responses:
        '200':
          description: "Field found."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/v1_NumericFieldDetail'
                  - $ref: '#/components/schemas/v1_CategoricalFieldDetail'
        '404':
          description: 'Field not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1_MatrixErrorResponse'
components:
  schemas:
    v0_MatrixRequest:
      type: object
      properties:
        bundle_fqids:
          type: array
          items:
            type: string
            format: dcp-fqid
        bundle_fqids_url:
          type: string
          format: url
        format:
          $ref: '#/components/schemas/v0_MatrixFormat'
    v0_MatrixFormat:
      type: string
      enum:
        - loom
        - csv
        - mtx
    v0_MatrixPostResponse:
      type: object
      properties:
        request_id:
          type: string
          format: uuid
        non_human_request_ids:
          type: object
          additionalProperties:
            type: string
        status:
          $ref: '#/components/schemas/v0_MatrixRequestStatus'
        message:
          type: string
    v0_MatrixGetResponse:
      type: object
      properties:
        request_id:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/v0_MatrixRequestStatus'
        matrix_location:
          type: string
        eta:
          type: string
        message:
          type: string
    v0_MatrixRequestStatus:
      type: string
      enum:
        - In Progress
        - Complete
        - Failed
    v0_MatrixErrorResponse:
      type: object
      properties:
        message:
          type: string
    v1_ComparisonFilterOperator:
      description: 'Comparison operators allowed in matrix filters.'
      type: string
      enum:
        - '='
        - '!='
        - '>'
        - '<'
        - '>='
        - '<='
        - 'in'
    v1_LogicalFilterOperator:
      description: 'Logical operators for combining filters.'
      type: string
      enum:
        - 'and'
        - 'or'
        - 'not'
    v1_ComparisonFilter:
      type: object
      properties:
        op:
          $ref: '#/components/schemas/v1_ComparisonFilterOperator'
        field:
          type: string
        value:
          oneOf:
            - type: string
            - type: number
            - type: array
              items:
                oneOf:
                  - type: string
                  - type: number
    v1_LogicalFilter:
      type: object
      properties:
        op:
          $ref: '#/components/schemas/v1_LogicalFilterOperator'
        value:
          oneOf:
            - $ref: '#/components/schemas/v1_ComparisonFilter'
            - $ref: '#/components/schemas/v1_LogicalFilter'
            - type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/v1_ComparisonFilter'
                  - $ref: '#/components/schemas/v1_LogicalFilter'
    v1_MatrixFilter:
      description: 'Filter to apply in a matrix request.'
      type: object
      oneOf:
        - $ref: '#/components/schemas/v1_ComparisonFilter'
        - $ref: '#/components/schemas/v1_LogicalFilter'
    v1_MatrixFormat:
      description: 'Format for the output matrix.'
      type: string
      default: 'loom'
    v1_MatrixFormats:
      description: 'Accepted matrix formats.'
      type: array
      items:
        $ref: '#/components/schemas/v1_MatrixFormat'
    v1_MatrixFields:
      description: 'Metadata fields to include in output matrix.'
      type: array
      items:
        type: string
    v1_MatrixFilters:
      description: 'Accepted filter names for a matrix request.'
      type: array
      items:
        type: string
    v1_MatrixFeature:
      description: >
        Feature type to include in the output matrix. For example,
        genes vs. transcripts.
      type: string
      default: 'gene'
    v1_MatrixFeatures:
      description: 'Accepted matrix feature types.'
      type: array
      items:
        $ref: '#/components/schemas/v1_MatrixFeature'
    v1_MatrixRequest:
      description: 'Request for an expression matrix.'
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/v1_MatrixFilter'
        fields:
          $ref: '#/components/schemas/v1_MatrixFields'
        format:
          $ref: '#/components/schemas/v1_MatrixFormat'
        feature:
          $ref: '#/components/schemas/v1_MatrixFeature'
      required:
        - filter
    v1_MatrixStatus:
      description: >
        Status of a matrix request, for example whether it is still running
        or has finished.
      type: string
    v1_RequestId:
      description: 'UUID identifying a matrix request.'
      type: string
      format: uuid
    v1_MatrixPostResponse:
      type: object
      properties:
        request_id:
          $ref: '#/components/schemas/v1_RequestId'
        non_human_request_ids:
          type: object
          additionalProperties:
            type: string
        status:
          $ref: '#/components/schemas/v1_MatrixStatus'
        message:
          type: string
    v1_MatrixGetResponse:
      type: object
      properties:
        request_id:
          $ref: '#/components/schemas/v1_RequestId'
        status:
          $ref: '#/components/schemas/v1_MatrixStatus'
        matrix_url:
          type: string
          description: 'URL where matrix can be retrieved.'
        message:
          type: string
          description: 'Additional information about the matrix request.'
        eta:
          type: string
          description: >
            Estimated time remaining for the request to complete.
      required:
        - request_id
        - status
    v1_MatrixErrorResponse:
      type: object
      properties:
        status_code:
          type: integer
          description: 'HTTP status code of error.'
        message:
          type: string
          description: 'Error message.'
    v1_MatrixFeatureDetail:
      type: object
      properties:
        feature:
          $ref: '#/components/schemas/v1_MatrixFeature'
        feature_description:
          description: 'Description of the feature type.'
          type: string
    v1_FieldDetail:
      type: object
      required:
        - field_name
        - field_description
        - field_type
      properties:
        field_name:
          type: string
          description: 'Name of the field.'
        field_description:
          type: string
          description: 'Description of the meaning of the field.'
        field_type:
          type: string
          description: >
            Type of the field, for example numeric or categorical.
    v1_NumericFieldDetail:
      allOf:
        - $ref: '#/components/schemas/v1_FieldDetail'
        - type: object
          properties:
            minimum:
              type: number
              description: >
                Minimum value for this field in the HCA expression data.
            maximum:
              type: number
              description: >
                Maximum value for this field in the HCA expression data.
          required:
            - minimum
            - maximum
    v1_CategoricalFieldDetail:
      allOf:
        - $ref: '#/components/schemas/v1_FieldDetail'
        - type: object
          properties:
            cell_counts:
              type: object
              description: >
                Count of cells associated with each possible value of
                the field.
              additionalProperties:
                type: integer
          required:
            - cell_counts
